
sdata = LOAD '/tmp/work/datasets/input/Student_Data.txt' using PigStorage(',');

dump sdata;

sdata = LOAD '/tmp/work/datasets/input/Student_Data.txt' using PigStorage(',') AS (id:int, fName:chararray, lName:chararray, 
phone:int, 
city:chararray);

fdata = FILTER sdata by id > 3;

rdata = FOREACH sdata generate id, city;

STORE rdata into '/tmp/work/datasets/output/a' USING PigStorage('|'); 
--Writes rdata with pipe as delimiter into output directory.



Create wordcount.pig in /usr/tmp/datasets/wordcountdir
data = load '/tmp/work/datasets/input//wordcountdir' as (line);
words = foreach data generate flatten(TOKENIZE(line)) as word;
grpd = group words by word;
cntd = foreach grpd generate group, COUNT(words);
dump cntd;

pig -f wordcount.pig;
----------------------------------
Pig UDF; Package myPigUDF; Class PERCENT

package myPigUDF;

import java.io.IOException;

import org.apache.pig.EvalFunc;
import org.apache.pig.data.Tuple;

public class PERCENT extends EvalFunc<String>{
	public String exec(Tuple input) throws IOException{
		if (input == null || input.size()==0 || input.get(0) == null)
			return null;
		try{
			String str = (String)input.get(0);
			return str.toUpperCase();
			
		}catch(Exception e){
			throw new IOException ("Caught exception processing input row ", e);
		}
	}

}


grunt> REGISTER /usr/tmp/myudfs.jar
grunt> rdata = FOREACH sdata generate id, myPigUDF.PERCENT(city);
--gives city in UPPER Case
----------------------------------
PIG - Find top 2 sites for users age above 18
Users = LOAD '/tmp/work/datasets/input/users.txt' USING PigStorage(',') as (name,age);
Fltrd = filter Users by age > 18;

Pages = LOAD '/tmp/work/datasets/input/pages.txt' USING PigStorage(',') as (user,url);
Jnd = join Fltrd by name, Pages by user; 
Output~~~~~~~~~~~~~~~~~~~
(Raj,20,Raj,Google)
(Khan,30,Khan,LinkedIn)
(Suraj,23,Suraj,Facebook)
(Suraj,23,Suraj,msn)
(Suraj,23,Suraj,Google)
~~~~~~~~~~~~~~~~~~~
Grpd = group Jnd by url;
Output~~~~~~~~~~~~~~~~~~~
(msn,{(Suraj,23,Suraj,msn)})
(Google,{(Suraj,23,Suraj,Google),(Raj,20,Raj,Google)})
(Facebook,{(Suraj,23,Suraj,Facebook)})
(LinkedIn,{(Khan,30,Khan,LinkedIn)})
~~~~~~~~~~~~~~~~~~~
Smmd = foreach Grpd generate group, COUNT(Jnd) as clicks; 
Output~~~~~~~~~~~~~~~~~~~

~~~~~~~~~~~~~~~~~~~
Srtd = order Smmd by clicks desc;

Top5 = limit Srtd 2;
--------------------
